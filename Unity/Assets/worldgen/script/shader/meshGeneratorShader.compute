#pragma kernel Marcher
#include "lookUpTable.compute"

struct  Triangle {
    float3 vertexA;
    float3 vertexB;
    float3 vertexC;

    float3 normalA;
    float3 normalB;
    float3 normalC;
};

AppendStructuredBuffer<Triangle> triangles;
RWStructuredBuffer<float4> points;

int size;
float isoLevel;

float3 interpolateVerts(float4 v1, float4 v2) {
    float t = (isoLevel - v1.w) / (v2.w - v1.w);
    return v1.xyz + t * (v2.xyz-v1.xyz);
}

int indexFromCoord(int x, int y, int z) {
    return z * size * size + y * size + x;
}

float3 latticeNormal(int x, int y, int z)
{
    float3 normal;

    normal.x = (points[indexFromCoord(x + 1, y, z)].w - points[indexFromCoord(x - 1, y, z)].w);
    normal.y = (points[indexFromCoord(x, y + 1, z)].w - points[indexFromCoord(x, y - 1, z)].w);
    normal.z = (points[indexFromCoord(x, y, z + 1)].w - points[indexFromCoord(x, y, z - 1)].w);

    return normalize(normal);
}


[numthreads(8,8,8)]
void Marcher (int3 id : SV_DispatchThreadID)
{
	id += 1;
	// Stop one point before the end because voxel includes neighbouring points
    if (id.x >= size -2 || id.y >= size-2 || id.z >= size-2) {
        return;
    }

    // 8 corners of the current cube
    float4 cubeCorners[8] = {
        points[indexFromCoord(id.x, id.y, id.z)],
        points[indexFromCoord(id.x + 1, id.y, id.z)],
        points[indexFromCoord(id.x + 1, id.y, id.z + 1)],
        points[indexFromCoord(id.x, id.y, id.z + 1)],
        points[indexFromCoord(id.x, id.y + 1, id.z)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z + 1)],
        points[indexFromCoord(id.x, id.y + 1, id.z + 1)]
    };

    float4 normalCorners[8] = {
        float4(latticeNormal(id.x, id.y, id.z)             ,cubeCorners[0].w),
        float4(latticeNormal(id.x + 1, id.y, id.z)         ,cubeCorners[1].w),
        float4(latticeNormal(id.x + 1, id.y, id.z + 1)     ,cubeCorners[2].w),
        float4(latticeNormal(id.x, id.y, id.z + 1)         ,cubeCorners[3].w),
        float4(latticeNormal(id.x, id.y + 1, id.z)         ,cubeCorners[4].w),
        float4(latticeNormal(id.x + 1, id.y + 1, id.z)     ,cubeCorners[5].w),
        float4(latticeNormal(id.x + 1, id.y + 1, id.z + 1) ,cubeCorners[6].w),
        float4(latticeNormal(id.x, id.y + 1, id.z + 1)     ,cubeCorners[7].w)
    }; 

    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    // The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.
    int cubeIndex = 0;
    if (cubeCorners[0].w < isoLevel) cubeIndex |= 1;
    if (cubeCorners[1].w < isoLevel) cubeIndex |= 2;
    if (cubeCorners[2].w < isoLevel) cubeIndex |= 4;
    if (cubeCorners[3].w < isoLevel) cubeIndex |= 8;
    if (cubeCorners[4].w < isoLevel) cubeIndex |= 16;
    if (cubeCorners[5].w < isoLevel) cubeIndex |= 32;
    if (cubeCorners[6].w < isoLevel) cubeIndex |= 64;
    if (cubeCorners[7].w < isoLevel) cubeIndex |= 128;

    // Create triangles for current cube configuration
    for (int i = 0; triangulation[cubeIndex][i] != -1; i +=3) {
        // Get indices of corner points A and B for each of the three edges
        // of the cube that need to be joined to form the triangle.
        int a0 = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
        int b0 = cornerIndexBFromEdge[triangulation[cubeIndex][i]];

        int a1 = cornerIndexAFromEdge[triangulation[cubeIndex][i+1]];
        int b1 = cornerIndexBFromEdge[triangulation[cubeIndex][i+1]];

        int a2 = cornerIndexAFromEdge[triangulation[cubeIndex][i+2]];
        int b2 = cornerIndexBFromEdge[triangulation[cubeIndex][i+2]];

        Triangle tri;
        tri.vertexC = interpolateVerts(cubeCorners[a0], cubeCorners[b0]);
        tri.vertexB = interpolateVerts(cubeCorners[a1], cubeCorners[b1]);
        tri.vertexA = interpolateVerts(cubeCorners[a2], cubeCorners[b2]);

		tri.normalC = -interpolateVerts(normalCorners[a0], normalCorners[b0]);
		tri.normalB = -interpolateVerts(normalCorners[a1], normalCorners[b1]);
		tri.normalA = -interpolateVerts(normalCorners[a2], normalCorners[b2]);
		
        triangles.Append(tri);
    }

}
