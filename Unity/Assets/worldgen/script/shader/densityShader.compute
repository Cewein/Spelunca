#pragma kernel density

RWStructuredBuffer<float4> points;
int numPointAxis;

//world position of the chunk 
float3 chunkPos;

//coord of the chunk
float3 chunkCoord;

uint indexFromCoord(uint3 id) {
    return id.z * numPointAxis * numPointAxis + id.y * numPointAxis + id.x;
}

float3 hash(float3 x )
{
	x = float3( dot(x,float3(127.1,311.7, 74.7)),
			  dot(x,float3(269.5,183.3,246.1)),
			  dot(x,float3(113.5,271.9,124.6)));

	return frac(sin(x)*43758.5453123);
}

[numthreads(8,8,8)]
void density (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= numPointAxis || id.y >= numPointAxis || id.z >= numPointAxis)
    {
        return;
    }

    float3 pos = chunkCoord + (float3(id)/float(numPointAxis-1.));

	float dist = 1.;

	for(float i = -1.; i <=1. ; i++)
	{
		for(float j = -1.; j <=1. ; j++)
		{
			for(float k = -1.; k <=1. ; k++) 
			{

				float3 loopPos = float3(i, j, k);
				float temp = distance(pos + loopPos,
									chunkCoord + hash(chunkCoord - loopPos)
									);
				if(temp < dist)
					dist = temp;

			}
		}
	}

	//get the pos
	uint index = indexFromCoord(id);

    points[index] = float4(id, 1.-dist);
	pos = chunkPos + id;

	if(pos.y < 0)
		points[index] = float4(id, 1.);
}
