#pragma kernel density

////////// BUFFER AND VARIABLE //////////

RWStructuredBuffer<float4> points;
int numPointAxis;

float3 playerSpawn;
float3 endZone;

//world position of the chunk 
float3 chunkPos;

//coord of the chunk
float3 chunkCoord;

//noise setting
float lacunarity;
float persistence;
int octave;

//area setting
float spawnSize;
float bossSize;
float tunnelSize;

////////// HELP FUNCTION //////////

uint indexFromCoord(int3 id) {
    return id.z * numPointAxis * numPointAxis + id.y * numPointAxis + id.x;
}
 
////////// SIMPLEX NOISE //////////

//	Simplex 3D Noise 
//	by Ian McEwan, Ashima Arts
//

float4 permute(float4 x){return fmod(((x*34.0)+1.0)*x, 289.0);}
float4 taylorInvSqrt(float4 r){return 1.79284291400159 - 0.85373472095314 * r;}

float snoise(float3 v){ 
  const float2  C = float2(1.0/6.0, 1.0/3.0) ;
  const float4  D = float4(0.0, 0.5, 1.0, 2.0);

// First corner
  float3 i  = floor(v + dot(v, C.yyy) );
  float3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  float3 g = step(x0.yzx, x0.xyz);
  float3 l = 1.0 - g;
  float3 i1 = min( g.xyz, l.zxy );
  float3 i2 = max( g.xyz, l.zxy );

  //  x0 = x0 - 0. + 0.0 * C 
  float3 x1 = x0 - i1 + 1.0 * C.xxx;
  float3 x2 = x0 - i2 + 2.0 * C.xxx;
  float3 x3 = x0 - 1. + 3.0 * C.xxx;

// Permutations
  i = fmod(i, 289.0 ); 
  float4 p = permute( permute( permute( 
             i.z + float4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + float4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + float4(0.0, i1.x, i2.x, 1.0 ));

// Gradients
// ( N*N points uniformly over a square, mapped onto an octahedron.)
  float n_ = 1.0/7.0; // N=7
  float3  ns = n_ * D.wyz - D.xzx;

  float4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  fmod(p,N*N)

  float4 x_ = floor(j * ns.z);
  float4 y_ = floor(j - 7.0 * x_ );    // fmod(j,N)

  float4 x = x_ *ns.x + ns.yyyy;
  float4 y = y_ *ns.x + ns.yyyy;
  float4 h = 1.0 - abs(x) - abs(y);

  float4 b0 = float4( x.xy, y.xy );
  float4 b1 = float4( x.zw, y.zw );

  float4 s0 = floor(b0)*2.0 + 1.0;
  float4 s1 = floor(b1)*2.0 + 1.0;
  float4 sh = -step(h, float4(0.0, 0.0, 0.0, 0.0));

  float4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  float4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  float3 p0 = float3(a0.xy,h.x);
  float3 p1 = float3(a0.zw,h.y);
  float3 p2 = float3(a1.xy,h.z);
  float3 p3 = float3(a1.zw,h.w);

//Normalise gradients
  float4 norm = taylorInvSqrt(float4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  float4 m = max(0.6 - float4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, float4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );
}

////////// MAIN FUNCTION NOISE //////////

[numthreads(8,8,8)]
void density (int3 id : SV_DispatchThreadID)
{

    if(id.x >= numPointAxis || id.y >= numPointAxis || id.z >= numPointAxis)
    {
        return;
    }

    float3 pos = chunkCoord + (float3(id)/float(numPointAxis-1.));

	//get the pos
	uint index = indexFromCoord(id);  

	float densityValue = 0.;

	for(int i = 0; i < octave; i++)
	{
		float l = pow(abs(lacunarity), float(i));
		float p = pow(abs(persistence), float(i));
		densityValue += snoise(pos * l) * p ;
	}

  densityValue += (densityValue + 1.) / 2.;

  points[index] = float4(id, densityValue);
	pos = chunkPos + id;

	///////   special gen area (spawn, tunnel, hardfloor and boss area)    ////////

	if(pos.y < -100)
	{
		points[index] = float4(id, 1.);
		return;
	}
  
	float sphereStart = distance(playerSpawn, pos);

	if (sphereStart < spawnSize)
	{
		points[index] = float4(id, sphereStart - spawnSize);
		return;
	}

	float sphereEnd = distance(endZone, pos);
	if (sphereEnd < bossSize)
	{
		points[index] = float4(id, sphereEnd - bossSize);
		return;
	}

	float tube1 = distance(pos, float3(sin(pos.z / 10.) * 6., cos(pos.z / 10.) * 6. - pos.z / 6., pos.z));
    float tube2 = distance(pos, float3(cos(pos.z / 10.) * 6., sin(pos.z / 10.) * 6. - pos.z / 6., pos.z));

	if (tube1 < tunnelSize && densityValue > tube1 - tunnelSize) 
	{
    points[index] = float4(id, tube1 - tunnelSize);
		return;
	}
	if (tube2 < tunnelSize && densityValue > tube2 - tunnelSize)
	{
		points[index] = float4(id, tube2 - tunnelSize);
		return;
	}
}
